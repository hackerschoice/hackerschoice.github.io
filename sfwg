#! /bin/bash


# This script sets a wireguard reverse tunnel on a target host.

# X=<VERSION>-<PRIV>-<PUB>-<ENDPOINT>-<DEV>-<IPV4Addr>-<IPV6Addr>


[[ -t 1 ]] && {
# shellcheck disable=SC2034 # Unused
CY="\e[1;33m" # yellow
CG="\e[1;32m" # green
CR="\e[1;31m" # red
CC="\e[1;36m" # cyan
# CM="\e[1;35m" # magenta
# CW="\e[1;37m" # white
CB="\e[1;34m" # blue
CF="\e[2m"    # faint
CN="\e[0m"    # none
# CBG="\e[42;1m" # Background Green
# night-mode
CDR="\e[0;31m" # red
CDG="\e[0;32m" # green
CDY="\e[0;33m" # yellow
CDB="\e[0;34m" # blue
CDM="\e[0;35m" # magenta
CDC="\e[0;36m" # cyan
CUL="\e[4m"
}

X="FOO\
  bar" \
bash -c '{ echo $X; }'

ADDRESS="192.168.0.1/32"
ADDRES6="fd::1/128"
PEER_ADDRESS="192.168.0.2/32"
PEER_ADDRES6="fd::2/128"
WITH_IPV6=1
WITH_TUNE=1
WGDEV="sf0"

[[ -z $UID ]] && UID=$(id -u)

ERR()
{
	echo -e >&2 "[${CR}ERROR${CN}] $*"
}

ERREXIT()
{
	local code
	code="$1"

	shift 1
	ERR "$@"

	exit "$code"
}

WARN()
{
	echo -e >&2 "[${CDY}WARN${CN}] $*"
}

x2data()
{
    local IFS
    IFS="-"
    CONF=($X)

    [[ ${#CONF[@]} -lt 4 ]] && ERREXIT 255 "X= is not a valid configuration string."
    [[ ${CONF[0]} -ne 1 ]] && ERREXIT 255 "X= contains a bad verison number."
    [[ ${#CONF[1]} -ne 44 ]] && ERREXIT 255 "X= does not contain a valid private key."
    [[ ${#CONF[2]} -ne 44 ]] && ERREXIT 255 "X= does not contain a valid public key."
    
    PRIV=${CONF[1]}
    PEER=${CONF[2]}
    EP=${CONF[3]}

    [[ ${#CONF[@]} -ge 5 ]] && WGDEV=${CONF[4]}
    [[ ${#CONF[@]} -ge 6 ]] && ADDRESS=${CONF[5]}
    [[ ${#CONF[@]} -ge 7 ]] && ADDRES6=${CONF[6]}
}

# Delete any IPT rule and add new one
ipt()
{
    local first
    local table
    table=$1
    first=$2

    shift 2
    echo iptables -t "t=$table" "f=$first" "$@"
    iptables -t "$table" -D "$@" 2>/dev/null # Delete old rule.
    iptables -t "$table" "$first" "$@"
}

sysinc()
{
	local key
	local val
	key=$1
	val=$2
	[[ $(sysctl -n "$key") -ge $val ]] && return
	sysctl -q -w "${key}=${val}" || WARN "Could not set '${key}=${val}'"
}

sysdec()
{
	local key
	local val
	key=$1
	val=$2
	[[ $(sysctl -n "$key") -le $val ]] && return
	sysctl -q -w "${key}=${val}" || WARN "Could not set '${key}=${val}'"
}

# Tune Network for scanning.
tune()
{
    sysdec 
    sysinc net.netfilter.nf_conntrack_max 1048576
    sysdec net.netfilter.nf_conntrack_tcp_timeout_syn_sent 10
    sysdec net.netfilter.nf_conntrack_tcp_timeout_syn_recv 5        # default is 30, 5 because of wg tunnel
    sysdec net.netfilter.nf_conntrack_tcp_timeout_last_ack 5        # default is 30
    sysdec net.netfilter.nf_conntrack_tcp_timeout_fin_wait 10       # default is 120
    sysdec net.netfilter.nf_conntrack_tcp_timeout_close 1           # default is 10
    sysdec net.netfilter.nf_conntrack_tcp_timeout_close_wait 10     # default is 60
    sysdec net.netfilter.nf_conntrack_tcp_timeout_unacknowledged 30 # default is 300
    sysdec net.netfilter.nf_conntrack_tcp_timeout_established 10800 # 3h, default is 5 days
    sysdec net.netfilter.nf_conntrack_icmp_timeout 10 # default is 30
    sysdec net.netfilter.nf_conntrack_udp_timeout 10  # default is 30
}

wg_up()
{
    local fn
    local addr
    command -v wg >/dev/null || ERREXIT 254 "WireGuard not installed. Try ${CDC}apt install wireguard${CN}"
    command -v sysctl >/dev/null || ERREXIT 255 "sysctl not found. Try ${CDC}apt-get install procps${CN}"
    command -v iptables >/dev/null || ERREXIT 255 "iptables not found. Try ${CDC}apt-get install iptables${CN}"
    command -v ip >/dev/null || ERREXIT 255 "ip not found. Try ${CDC}apt-get install iproute2${CN}"

    [[ $(sysctl -bn net.ipv6.conf.all.disable_ipv6 2>/dev/null) -ne 0 ]] && {
        unset WITH_IPV6
        WARN "IPv6 disabled. Try ${CDC}sysctl net.ipv6.conf.all.disable_ipv6=0${CN}"
    }
    [[ $(sysctl -bn net.ipv4.ip_forward) -eq 0 ]] && sysctl net.ipv4.ip_forward=1

    ip link del "${WGDEV}" &>/dev/null
    ip link add "${WGDEV}" type wireguard || ERREXIT 255

    fn="/dev/shm/private.$$"
    echo "$PRIV" >"${fn}"
    addr="${PEER_ADDRESS}"
    [[ -n $WITH_IPV6 ]] && addr+=",${PEER_ADDRES6}"
    # addr="0.0.0.0/0"
    # [[ -n $WITH_IPV6 ]] && addr+=", ::/0"
    wg set "${WGDEV}" private-key "${fn}" peer "$PEER" allowed-ips "${addr}" endpoint "${EP}" persistent-keepalive 25 || ERREXIT 255
    rm -f "${fn}"

    ip -4 address add "${ADDRESS}" dev "${WGDEV}" || ERREXIT 255
    [[ -n $WTIH_IPV6 ]] && ip -6 address add "${ADDRES6}" dev "${WGDEV}" || { unset WITH_IPV6; }

    ip link set mtu 1420 up dev "${WGDEV}"

    ip -4 route add "${PEER_ADDRESS}" dev "${WGDEV}"
    [[ -n $WITH_IPV6 ]] && ip -6 route add "${PEER_ADDRES6}" dev "${WGDEV}" || { unset WITH_IPV6; }

    [[ $(iptables -L FORWARD) != *"policy ACC"* ]] && {
        ipt filter -I FORWARD -i "${WGDEV}" -j ACCEPT
        ipt filter -I FORWARD -o "${WGDEV}" -j ACCEPT
    }

    ipt nat -A POSTROUTING -s "${PEER_ADDRESS}" -j MASQUERADE

    [[ -n $WITH_OPTIMIZE ]] && tune

    echo -e "\
To stop type ${CDC}ip link del ${WGDEV}${CN}."
}

wt_up()
{
    ERREXIT 254 "Auto install of wiretap not yet supported. "
}

[[ -z $X ]] && {
    echo -e "\
The variable ${CDY}X=${CN} is not set. Try
    ${CDC}X=<YourConfigurationString> ./sfwg${CN}"

    exit 255;
}
x2data

[[ $UID -eq 0 ]] && { wg_up; exit; }
wt_up